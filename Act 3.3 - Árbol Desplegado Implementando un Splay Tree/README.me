#add

**Analisis temporal**
add realiza una inserción BST regular y luego divide el árbol en el nuevo nodo, ajustando el árbol para que el nodo insertado esté en la raíz del árbol.
Es por ello que que la complejidad es de O(log n)


#remove

**Analisis temporal**
La complejidad es de O(logn) ya que se trata de borrar el nodo y hacer las correcciones necesarias para el splay. 



#find

**Analisis temporal**
La complejidad consta de O(logn). La búsqueda realiza una búsqueda regular de BST y luego divide el árbol
en el nodo que se busca, ajustando el árbol para que el nodo buscado esté en la raíz del árbol.Esto asegura que los tiempos de
busqueda siempre sean de complejidad de O(log n). Ya que los nodos más buscados siempre se van a encontrar cerca de la raíz. 


#size

**Analisis temporal**
La complejidad del size es de O(n). Ya que el algoritmo visita cada nodo del árbol exactamente una vez
