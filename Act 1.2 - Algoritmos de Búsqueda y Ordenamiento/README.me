#Búsqueda secuencial
**Análisis de complejidad temporal**




#Búsqueda binaria
**Análisis de complejidad temporal**





#Bubble sort
**Análisis de complejidad temporal**
El peor escenario contempla que el arreglo o el vector este ordenado de forma inversa o en orden descendente. Es por ello que tendría que realizar N * (N+1) / 2. El cual en el peor escenario es considerado como O(n^2). 




#Merge Sort
**Análisis de complejidad temporal**
En el peor de los escenarios la complejidad sería de O(n log(n)). Esto se debe a que el nivel más bajo del árbol que se forma siempre tiene que suceder. SIn embargo las particiones o las subdivisiones que se crean en los pasos anteriores son siempre divididas y esto resulta en un menor tiempo a n. Es por ello que al final es O(n log(n)). 



#Selection Sort
**Análisis de complejidad temporal**

Ya que estamos analizando el peor de los casos tenemos que la complejidad es de O(n^2). El peor caso es el que se da cuando el arreglo o el vecotr ya está ordenada , pero el elemento más pequeño es el último.
El coste en este caso es que en cada paso se realiza un intercambio. Lo que más o menos se puede resumir en lo siguiente: N * (N+1) / 2. Pero considerando el peor escenario se considera como O(n^2). 






