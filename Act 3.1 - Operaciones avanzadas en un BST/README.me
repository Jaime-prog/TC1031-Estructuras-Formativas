#visit

**Análisis de complejidad temporal**

La intención de esta función es desplegar todos los valores almacenados en el BST. Debido a esto se tiene que
recorrer en su totalidad el árbol y por ello en el peor escenario la complejidad es de O(n).


#height

**Análisis de complejidad temporal**

La intención de esta función es calcular el nivel más profundo del árbol. Para un árbol no balanceado 
el peor escenario es de O(n^2). Esto se debe que se tiene que recorrer n número de nodos y es por ellos que se va reduciendo
en O(n-1). Y al acumularlas el peor escenario es de O(n^2). 


#ancestors

**Análisis de complejidad temporal**
La intención de esta función es deplegar los ancestros del valor que te den como entrada. Por lo cual, la complejidad
es similar a la de una visita. Entonces la complejidad es de O(n). 


#whatlevelamI

**Análisis de complejidad temporal**
La intención de esta función es obtener el nivel del nodo que se de como entrada
Por ello, complejidad temporal de esta función es O(n) donde n es el número de nodos del árbol binario dado. 

